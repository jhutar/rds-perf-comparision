---
- name: Deploy EC2 and RDS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Create a VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "10.0.0.0/16"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: vpc

    - name: Create subnet 1
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.1.0/24"
        az: "{{ aws_az1 }}"
        region: "{{ aws_region }}"
        map_public: yes
        tags:
          Name: "{{ project_name }}-subnet1"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: subnet1

    - name: Create subnet 2
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.2.0/24"
        az: "{{ aws_az2 }}"
        region: "{{ aws_region }}"
        map_public: yes
        tags:
          Name: "{{ project_name }}-subnet2"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: subnet2

    - name: Create an internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: igw

    - name: Create a route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet1.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: route

    - name: Create a security group for the EC2 instance
      amazon.aws.ec2_group:
        name: "{{ project_name }}-ec2-sg"
        description: "Allow SSH from anywhere and all outbound traffic"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow SSH from anywhere"
        rules_egress:
          - proto: all
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow all outbound traffic"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: ec2_sg

    - name: Create a security group for the RDS instance
      amazon.aws.ec2_group:
        name: "{{ project_name }}-rds-sg"
        description: "Allow PostgreSQL traffic from the EC2 security group"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 5432
            group_id: "{{ ec2_sg.group_id }}"
            rule_desc: "Allow PostgreSQL traffic from EC2"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_sg

    - name: Create RDS subnet group
      amazon.aws.rds_subnet_group:
        state: present
        name: "{{ project_name }}-rds-subnet-group"
        description: "Subnet group for RDS"
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet1.subnet.id }}"
          - "{{ subnet2.subnet.id }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_subnet_group

    - name: Create the RDS instance
      amazon.aws.rds_instance:
        state: "running"
        allocated_storage: "{{ aws_rds_storage }}"
        max_allocated_storage: "{{ aws_rds_storage }}"
        allow_major_version_upgrade: false
        auto_minor_version_upgrade: false
        availability_zone: "{{ aws_az1 }}"
        backup_retention_period: 0
        db_instance_class: "{{ aws_rds_instance_type }}"
        db_name: "{{ ( project_name + '-rds' ) | regex_replace('[^a-zA-Z0-9]+', '') }}"
        db_instance_identifier: "{{ ( project_name + '-rds' ) | regex_replace('[^a-zA-Z0-9]+', '') }}"
        db_subnet_group_name: "{{ rds_subnet_group.subnet_group.name }}"
        deletion_protection: false
        enable_performance_insights: true
        engine: "{{ aws_rds_engine }}"
        engine_version: "{{ aws_rds_engine_version }}"
        iops: null   # Is only relevant when using storage_type is set to io1
        master_username: "{{ aws_rds_user }}"
        master_user_password: "{{ aws_rds_password }}"
        performance_insights_retention_period: 7
        port: "{{ aws_rds_port }}"
        publicly_accessible: false
        region: "{{ aws_region }}"
        storage_encrypted: true
        storage_type: "gp3"
        vpc_security_group_ids:
          - "{{ rds_sg.group_id }}"
        wait: yes
        tags:
          Name: "{{ project_name }}-rds"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_instance

    - debug:
        var: rds_instance

    - name: Launch the EC2 instance
      amazon.aws.ec2_instance:
        state: "running"
        name: "{{ project_name }}-vm"
        key_name: "{{ aws_ec2_ssh_key_name }}"
        instance_type: "{{ aws_ec2_instance_type }}"
        image:
          id: "{{ aws_ec2_ami_id }}"
        region: "{{ aws_region }}"
        network_interfaces:
          - assign_public_ip: true
            delete_on_termination: true
            groups:
              - "{{ ec2_sg.group_id }}"
            subnet_id: "{{ subnet1.subnet.id }}"
        filters:
          tag:Name: "{{ project_name }}-vm"
          tag:Project: "{{ project_name }}"
          tag:Owner: "{{ owner_name }}"
          instance-state-name: "running"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
        termination_protection: false
        wait: yes
        wait_timeout: 600
      register: ec2_instance

    - name: Add new instance to host group
      add_host:
        name: "{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
        groups: new_ec2_instances
        # Additional variabes needed in a test phase:
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ aws_ec2_ssh_private_key_file }}"
        rds_instance_endpoint: "{{ rds_instance.endpoint.address }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
        port: 22
        delay: 15
        timeout: 320
        state: started

    - name: Display connection information
      debug:
        msg:
          - "Using these AWS entities:"
          - "  VPC {{ vpc.vpc.id }}"
          - "  subnet 1 {{ subnet1.subnet.id }}"
          - "  subnet 2 {{ subnet2.subnet.id }}"
          - "  subnet group for RDS {{ rds_subnet_group.subnet_group.db_subnet_group_name }}"
          - "  route {{ route.route_table.id }}"
          - "  gateway {{ igw.gateway_id }}"
          - "  securty group for VM {{ ec2_sg.group_id }}"
          - "  securty group for RDS {{ rds_sg.group_id }}"
          - "EC2 Instance Public IP: {{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
          - "  to connect to it: ssh -i {{ aws_ec2_ssh_private_key_file }} ec2-user@{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
          - "RDS Endpoint: {{ rds_instance.endpoint.address }}"
          - "  to connect to it (from VM): PGPASSWORD=... psql --host {{ rds_instance.endpoint.address }} --port {{ aws_rds_port }} --username {{ aws_rds_user }} postgres"
