---
- name: Deploy EC2 and RDS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # --- General AWS Variables ---
    aws_region: "us-east-1"
    aws_az: "us-east-1a"
    project_name: "my-project"

    # --- EC2 Specific Variables ---
    # IMPORTANT: Replace with a valid RHEL 10 AMI ID for your region.
    # As of now, a stable RHEL 10 AMI is not widely available,
    # so you might need to use a beta or a different RHEL version.
    aws_ec2_ami_id: "ami-0c55b159cbfafe1f0" # Placeholder for RHEL, currently Amazon Linux 2
    aws_ec2_instance_type: "t2.micro"
    aws_ec2_ssh_key_name: "my-ssh-key" # Make sure this key pair exists in your AWS account
    aws_ec2_ssh_private_key_file: "~/.ssh/my-ssh-key.pem" # Path to the private key for the above key pair

    # --- RDS Specific Variables ---
    aws_rds_instance_type: "db.t3.micro"
    aws_rds_storage: 10
    aws_rds_engine: "postgres"
    aws_rds_engine_version: "15.3"
    aws_rds_user: "myuser"
    aws_rds_password: "mysecurepassword"

  tasks:
    - name: Create a VPC
      ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "10.0.0.0/16"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: vpc

    - name: Create a public subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.1.0/24"
        az: "{{ aws_az }}"
        region: "{{ aws_region }}"
        map_public: yes
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: public_subnet

    - name: Create an internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: igw

    - name: Create a route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"

    - name: Create a security group for the EC2 instance
      ec2_group:
        name: "{{ project_name }}-ec2-sg"
        description: "Allow SSH from anywhere and all outbound traffic"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow SSH from anywhere"
        rules_egress:
          - proto: all
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow all outbound traffic"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: ec2_sg

    - name: Create a security group for the RDS instance
      ec2_group:
        name: "{{ project_name }}-rds-sg"
        description: "Allow PostgreSQL traffic from the EC2 security group"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 5432
            group_id: "{{ ec2_sg.group_id }}"
            rule_desc: "Allow PostgreSQL traffic from EC2"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: rds_sg

    - name: Create RDS subnet group
      rds_subnet_group:
        state: present
        name: "{{ project_name }}-rds-subnet-group"
        description: "Subnet group for RDS"
        region: "{{ aws_region }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: rds_subnet_group

    - name: Create the RDS instance
      rds:
        command: create
        instance_name: "{{ project_name }}-db"
        db_engine: "{{ aws_rds_engine }}"
        engine_version: "{{ aws_rds_engine_version }}"
        instance_type: "{{ aws_rds_instance_type }}"
        size: "{{ aws_rds_storage }}"
        storage_type: "gp2"
        username: "{{ aws_rds_user }}"
        password: "{{ aws_rds_password }}"
        subnet: "{{ rds_subnet_group.subnet_group.name }}"
        vpc_security_groups:
          - "{{ rds_sg.group_id }}"
        region: "{{ aws_region }}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 1200
        tags:
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: rds_instance

    - name: Launch the EC2 instance
      ec2:
        key_name: "{{ aws_ec2_ssh_key_name }}"
        group_id: "{{ ec2_sg.group_id }}"
        instance_type: "{{ aws_ec2_instance_type }}"
        image: "{{ aws_ec2_ami_id }}"
        wait: yes
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ public_subnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags:
          Name: "{{ project_name }}-vm"
          Project: "{{ project_name }}"
          owner: "jhutar"
      register: ec2_instance

    - name: Add new instance to host group
      add_host:
        name: "{{ item.public_ip }}"
        groups: new_ec2_instances
      with_items: "{{ ec2_instance.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2_instance.instances }}"

    - name: Display connection information
      debug:
        msg:
          - "EC2 Instance Public IP: {{ ec2_instance.instances[0].public_ip }}"
          - "RDS Endpoint: {{ rds_instance.instance.endpoint }}"
          - "To connect to the EC2 instance, use: ssh -i {{ aws_ec2_ssh_private_key_file }} ec2-user@{{ ec2_instance.instances[0].public_ip }}"
          - "From the EC2 instance, you can connect to the RDS database at: {{ rds_instance.instance.endpoint }}"

- name: Configure newly created EC2 instance
  hosts: new_ec2_instances
  become: yes
  gather_facts: yes
  vars:
    # This assumes a RHEL/CentOS/Fedora based AMI. For Debian/Ubuntu, use 'apt'.
    ansible_user: ec2-user
    ansible_ssh_private_key_file: "{{ hostvars['localhost']['aws_ec2_ssh_private_key_file'] }}"

  tasks:
    - name: Install PostgreSQL client
      yum:
        name: postgresql
        state: present
