---
- name: Deploy EC2 and RDS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - deploy
  vars:
    # --- General AWS Variables ---
    aws_region: "us-east-2"
    aws_az1: "us-east-2a"
    aws_az2: "us-east-2b"
    project_name: "rds-perf-comparision"
    owner_name: "jhutar"


    # --- EC2 Specific Variables ---
    aws_ec2_ami_id: "ami-068d5d5ed1eeea07c"
    aws_ec2_instance_type: "t2.micro"
    aws_ec2_ssh_key_name: "jhutar" # Make sure this key pair exists in your AWS account
    aws_ec2_ssh_private_key_file: "~/.ssh/id_rsa-fedora3" # Path to the private key for the above key pair

    # --- RDS Specific Variables ---
    aws_rds_instance_type: "db.t3.micro"
    aws_rds_storage: 100
    aws_rds_engine: "postgres"
    aws_rds_engine_version: "17.5"
    aws_rds_user: "myuser"
    aws_rds_password: "mysecurepassword"

  tasks:
    - name: Create a VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "10.0.0.0/16"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: vpc

    - name: Create subnet 1
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.1.0/24"
        az: "{{ aws_az1 }}"
        region: "{{ aws_region }}"
        map_public: yes
        tags:
          Name: "{{ project_name }}-subnet1"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: subnet1

    - name: Create subnet 2
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.0.2.0/24"
        az: "{{ aws_az2 }}"
        region: "{{ aws_region }}"
        map_public: yes
        tags:
          Name: "{{ project_name }}-subnet2"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: subnet2

    - name: Create an internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: igw

    - name: Create a route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet1.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: route

    - name: Create a security group for the EC2 instance
      amazon.aws.ec2_group:
        name: "{{ project_name }}-ec2-sg"
        description: "Allow SSH from anywhere and all outbound traffic"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow SSH from anywhere"
        rules_egress:
          - proto: all
            cidr_ip: "0.0.0.0/0"
            rule_desc: "Allow all outbound traffic"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: ec2_sg

    - name: Create a security group for the RDS instance
      amazon.aws.ec2_group:
        name: "{{ project_name }}-rds-sg"
        description: "Allow PostgreSQL traffic from the EC2 security group"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 5432
            group_id: "{{ ec2_sg.group_id }}"
            rule_desc: "Allow PostgreSQL traffic from EC2"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_sg

    - name: Create RDS subnet group
      amazon.aws.rds_subnet_group:
        state: present
        name: "{{ project_name }}-rds-subnet-group"
        description: "Subnet group for RDS"
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet1.subnet.id }}"
          - "{{ subnet2.subnet.id }}"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_subnet_group

    - name: Create the RDS instance
      amazon.aws.rds_instance:
        state: "running"
        allocated_storage: "{{ aws_rds_storage }}"
        max_allocated_storage: "{{ aws_rds_storage }}"
        allow_major_version_upgrade: false
        auto_minor_version_upgrade: false
        availability_zone: "{{ aws_az1 }}"
        backup_retention_period: 0
        db_instance_class: "{{ aws_rds_instance_type }}"
        db_name: "{{ ( project_name + '-rds' ) | regex_replace('[^a-zA-Z0-9]+', '') }}"
        db_instance_identifier: "{{ ( project_name + '-rds' ) | regex_replace('[^a-zA-Z0-9]+', '') }}"
        db_subnet_group_name: "{{ rds_subnet_group.subnet_group.name }}"
        deletion_protection: false
        enable_performance_insights: true
        engine: "{{ aws_rds_engine }}"
        engine_version: "{{ aws_rds_engine_version }}"
        skip_final_snapshot: true
        iops: null   # Is only relevant when using storage_type is set to io1
        master_username: "{{ aws_rds_user }}"
        master_user_password: "{{ aws_rds_password }}"
        performance_insights_retention_period: 7
        port: 5432
        publicly_accessible: false
        region: "{{ aws_region }}"
        storage_encrypted: true
        storage_type: "gp3"
        vpc_security_group_ids:
          - "{{ rds_sg.group_id }}"
        wait: yes
        tags:
          Name: "{{ project_name }}-rds"
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
      register: rds_instance

    - debug:
        var: rds_instance

    - name: Launch the EC2 instance
      amazon.aws.ec2_instance:
        state: "running"
        name: "{{ project_name }}-vm"
        key_name: "{{ aws_ec2_ssh_key_name }}"
        instance_type: "{{ aws_ec2_instance_type }}"
        image:
          id: "{{ aws_ec2_ami_id }}"
        region: "{{ aws_region }}"
        network_interfaces:
          - assign_public_ip: true
            delete_on_termination: true
            groups:
              - "{{ ec2_sg.group_id }}"
            subnet_id: "{{ subnet1.subnet.id }}"
        filters:
          tag:Name: "{{ project_name }}-vm"
          tag:Project: "{{ project_name }}"
          tag:Owner: "{{ owner_name }}"
          instance-state-name: "running"
        tags:
          Project: "{{ project_name }}"
          Owner: "{{ owner_name }}"
        termination_protection: false
        wait: yes
        wait_timeout: 600
      register: ec2_instance

    - name: Add new instance to host group
      add_host:
        name: "{{ item.network_interfaces[0].association.public_ip }}"
        groups: new_ec2_instances
      with_items: "{{ ec2_instance.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.network_interfaces[0].association.public_ip }}"
        port: 22
        delay: 15
        timeout: 320
        state: started
      with_items: "{{ ec2_instance.instances }}"

    - name: Display connection information
      debug:
        msg:
          - "EC2 Instance Public IP: {{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
          - "To connect to the EC2 instance, use: ssh -i {{ aws_ec2_ssh_private_key_file }} ec2-user@{{ ec2_instance.instances[0].network_interfaces[0].association.public_ip }}"
          - "Created VPC {{ vpc.vpc.id }}"
          - "Created subnet 1 {{ subnet1.subnet.id }}"
          - "Created subnet 2 {{ subnet2.subnet.id }}"
          - "Created subnet group for RDS {{ rds_subnet_group.subnet_group.db_subnet_group_name }}"
          - "Created route {{ route.route_table.id }}"
          - "Created gateway {{ igw.gateway_id }}"
          - "Created securty group for VM {{ ec2_sg.group_id }}"
          - "Created securty group for RDS {{ rds_sg.group_id }}"
          ###- "RDS Endpoint: {{ rds_instance.instance.endpoint }}"
          ###- "From the EC2 instance, you can connect to the RDS database at: {{ rds_instance.instance.endpoint }}"


- name: Configure newly created EC2 instance
  hosts: new_ec2_instances
  become: yes
  gather_facts: yes
  tags:
    - test
  vars:
    # This assumes a RHEL/CentOS/Fedora based AMI. For Debian/Ubuntu, use 'apt'.
    ###ansible_user: ec2-user
    ###ansible_ssh_private_key_file: "{{ hostvars['localhost']['aws_ec2_ssh_private_key_file'] }}"

  tasks:
    - name: Install Podman
      yum:
        name: podman
        state: present

    - name: Pull HammerDB PostgreSQL container image
      command: podman pull docker.io/tpcorg/hammerdb:postgres

    - name: Deploy HammerDB test scripts
      template:
          src: "{{ item.src }}"
          dest: "{{ item.dest }}"
      loop:
        - src: "templates/hammerdb-tpcc-setup.tcl.j2"
          dest: "setup.tcl"
        - src: "templates/hammerdb-tpcc-run.tcl.j2"
          dest: "run.tcl"

    - name: Setup HammerDB test
      shell: |
        cat setup.tcl | podman run --network=host --rm -it --name hammerdb docker.io/tpcorg/hammerdb:postgres ./hammerdbcli
      register: hammerdb_setup_out

    - debug:
        var: hammerdb_setup_out

    - name: Run HammerDB test
      shell: |
        cat run.tcl | podman run --network=host --rm -it --name hammerdb docker.io/tpcorg/hammerdb:postgres ./hammerdbcli
      register: hammerdb_run_out

    - debug:
        var: hammerdb_run_out

- name: Cleanup Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - cleanup
  vars:
    aws_region: "us-east-2"
    project_name: "rds-perf-comparision"
    owner_name: "jhutar"

  tasks:
    - name: Terminate EC2 instances
      amazon.aws.ec2_instance:
        state: absent
        region: "{{ aws_region }}"
        wait: yes
        filters:
          "tag:Project": "{{ project_name }}"
          "tag:Owner": "{{ owner_name }}"

    - name: Delete the RDS instance
      amazon.aws.rds_instance:
        command: delete
        instance_name: "{{ project_name }}-db"
        region: "{{ aws_region }}"
        skip_final_snapshot: yes
        wait: yes
        wait_timeout: 1200
      ignore_errors: yes

    - name: Delete RDS subnet group
      amazon.aws.rds_subnet_group:
        state: absent
        name: "{{ project_name }}-rds-subnet-group"
        region: "{{ aws_region }}"
      ignore_errors: yes

    - name: Delete VPC and its resources
      amazon.aws.ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        state: absent
        region: "{{ aws_region }}"
        cidr_block: "10.0.0.0/16"
      ignore_errors: yes
